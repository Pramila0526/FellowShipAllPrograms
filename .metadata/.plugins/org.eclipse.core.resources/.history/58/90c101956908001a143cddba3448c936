package com.bridgelabz.fellowshipprogramss.utility;

public class BalancedParan 
{ 
	/*public static class stack 
	{ */
	int MAX=10;
		int top=-1; 
		char a[] = new char[MAX]; 

		void push(char x) 
		{ 
			if (top == MAX-1) 
			{ 
				System.out.println("Stack full"); 
			} 
			else
			{ 
				a[++top] = x; 
			} 
		} 

		char pop() 
		{ 
			if (top == -1) 
			{ 
				System.out.println("Underflow error"); 
				return '\0'; 
			} 
			else
			{ 
				char element = a[top]; 
				top--; 
				return element; 
			} 
		} 
		public void display()
		{
			
			if(top>=0)
			{
				System.out.println("Elements are");
				for(int i=0;i>=0;i--)
				{
					System.out.println(a[i]+ "\t");
				}
			}
		}
		boolean isEmpty() 
		{ 
			return (top == -1) ? true : false; 
		} 
	 
	
	
	static boolean isMatchingPair(char character1, char character2) 
	{ 
	if (character1 == '(' && character2 == ')') 
		return true; 
	else if (character1 == '{' && character2 == '}') 
		return true; 
	else if (character1 == '[' && character2 == ']') 
		return true; 
	else
		return false; 
	} 

	static boolean areParenthesisBalanced(char exp[]) 
	{ 
	
	BalancedParan st=new BalancedParan(); 
	for(int i=0;i<exp.length;i++) 
	{ 
		
		if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[') 
			st.push(exp[i]); 
	
		if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') 
		{ 
			if (st.isEmpty()) 
			{ 
				return false; 
			} 

			else if ( !isMatchingPair(st.pop(), exp[i]) ) 
			{ 
				return false; 
			} 
		} 
			
	} 
		
	
		
	if (st.isEmpty()) 
		return true; 
	else
		{
			return false; 
		} 
	} 
	
	public static void main(String[] args) 
	{ 
		String s="{(a+b)}{}";
		char exp[]=s.toCharArray();
		if (areParenthesisBalanced(exp)) 
			System.out.println("Balanced "); 
		else
			System.out.println("Not Balanced "); 
	} 

} 
